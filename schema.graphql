"""
The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.
"""
directive @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @goModel(forceGenerate: Boolean, model: String, models: [String!]) on ENUM | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

type Blog implements Node {
  authors: [Profile!]
  categories: [Category!]
  comments: [Comment!]
  createTime: Time!
  description: String
  featured: Boolean
  id: ID!
  owner: Profile
  ownerID: ID
  pages: [Page!]
  posts: [Post!]
  slug: String!
  subscribers: [Profile!]
  tagline: String
  tags: [Tag!]
  title: String!
  updateTime: Time
}

"""A connection to a list of items."""
type BlogConnection {
  """A list of edges."""
  edges: [BlogEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type BlogEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: Blog
}

"""Ordering options for Blog connections"""
input BlogOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Blogs."""
  field: BlogOrderField!
}

"""Properties by which Blog connections can be ordered."""
enum BlogOrderField {
  CREATE_TIME
  UPDATE_TIME
}

"""
BlogWhereInput is used for filtering Blog objects.
Input was generated by ent.
"""
input BlogWhereInput {
  and: [BlogWhereInput!]

  """create_time field predicates"""
  createTime: Time
  createTimeGT: Time
  createTimeGTE: Time
  createTimeIn: [Time!]
  createTimeLT: Time
  createTimeLTE: Time
  createTimeNEQ: Time
  createTimeNotIn: [Time!]

  """description field predicates"""
  description: String
  descriptionContains: String
  descriptionContainsFold: String
  descriptionEqualFold: String
  descriptionGT: String
  descriptionGTE: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIn: [String!]
  descriptionIsNil: Boolean
  descriptionLT: String
  descriptionLTE: String
  descriptionNEQ: String
  descriptionNotIn: [String!]
  descriptionNotNil: Boolean

  """featured field predicates"""
  featured: Boolean
  featuredIsNil: Boolean
  featuredNEQ: Boolean
  featuredNotNil: Boolean

  """authors edge predicates"""
  hasAuthors: Boolean
  hasAuthorsWith: [ProfileWhereInput!]

  """categories edge predicates"""
  hasCategories: Boolean
  hasCategoriesWith: [CategoryWhereInput!]

  """comments edge predicates"""
  hasComments: Boolean
  hasCommentsWith: [CommentWhereInput!]

  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [ProfileWhereInput!]

  """pages edge predicates"""
  hasPages: Boolean
  hasPagesWith: [PageWhereInput!]

  """posts edge predicates"""
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]

  """subscribers edge predicates"""
  hasSubscribers: Boolean
  hasSubscribersWith: [ProfileWhereInput!]

  """tags edge predicates"""
  hasTags: Boolean
  hasTagsWith: [TagWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: BlogWhereInput
  or: [BlogWhereInput!]

  """owner_id field predicates"""
  ownerID: ID
  ownerIDContains: ID
  ownerIDContainsFold: ID
  ownerIDEqualFold: ID
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIn: [ID!]
  ownerIDIsNil: Boolean
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDNEQ: ID
  ownerIDNotIn: [ID!]
  ownerIDNotNil: Boolean

  """slug field predicates"""
  slug: String
  slugContains: String
  slugContainsFold: String
  slugEqualFold: String
  slugGT: String
  slugGTE: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIn: [String!]
  slugLT: String
  slugLTE: String
  slugNEQ: String
  slugNotIn: [String!]

  """tagline field predicates"""
  tagline: String
  taglineContains: String
  taglineContainsFold: String
  taglineEqualFold: String
  taglineGT: String
  taglineGTE: String
  taglineHasPrefix: String
  taglineHasSuffix: String
  taglineIn: [String!]
  taglineIsNil: Boolean
  taglineLT: String
  taglineLTE: String
  taglineNEQ: String
  taglineNotIn: [String!]
  taglineNotNil: Boolean

  """title field predicates"""
  title: String
  titleContains: String
  titleContainsFold: String
  titleEqualFold: String
  titleGT: String
  titleGTE: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIn: [String!]
  titleLT: String
  titleLTE: String
  titleNEQ: String
  titleNotIn: [String!]

  """update_time field predicates"""
  updateTime: Time
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeIn: [Time!]
  updateTimeIsNil: Boolean
  updateTimeLT: Time
  updateTimeLTE: Time
  updateTimeNEQ: Time
  updateTimeNotIn: [Time!]
  updateTimeNotNil: Boolean
}

type Category implements Node {
  blog: Blog
  blogID: ID
  id: ID!
  name: String!
  posts: [Post!]
  slug: String!
}

"""A connection to a list of items."""
type CategoryConnection {
  """A list of edges."""
  edges: [CategoryEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type CategoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: Category
}

"""Ordering options for Category connections"""
input CategoryOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Categories."""
  field: CategoryOrderField!
}

"""Properties by which Category connections can be ordered."""
enum CategoryOrderField {
  NAME
}

"""
CategoryWhereInput is used for filtering Category objects.
Input was generated by ent.
"""
input CategoryWhereInput {
  and: [CategoryWhereInput!]

  """blog_id field predicates"""
  blogID: ID
  blogIDContains: ID
  blogIDContainsFold: ID
  blogIDEqualFold: ID
  blogIDGT: ID
  blogIDGTE: ID
  blogIDHasPrefix: ID
  blogIDHasSuffix: ID
  blogIDIn: [ID!]
  blogIDIsNil: Boolean
  blogIDLT: ID
  blogIDLTE: ID
  blogIDNEQ: ID
  blogIDNotIn: [ID!]
  blogIDNotNil: Boolean

  """blog edge predicates"""
  hasBlog: Boolean
  hasBlogWith: [BlogWhereInput!]

  """posts edge predicates"""
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]

  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: CategoryWhereInput
  or: [CategoryWhereInput!]

  """slug field predicates"""
  slug: String
  slugContains: String
  slugContainsFold: String
  slugEqualFold: String
  slugGT: String
  slugGTE: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIn: [String!]
  slugLT: String
  slugLTE: String
  slugNEQ: String
  slugNotIn: [String!]
}

type Comment implements Node {
  author: Profile
  authorID: ID
  blog: Blog
  blogID: ID
  body: String!
  createTime: Time!
  id: ID!
  post: Post
  postID: ID
  reactions: [Reaction!]
  updateTime: Time
}

"""A connection to a list of items."""
type CommentConnection {
  """A list of edges."""
  edges: [CommentEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type CommentEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: Comment
}

"""Ordering options for Comment connections"""
input CommentOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Comments."""
  field: CommentOrderField!
}

"""Properties by which Comment connections can be ordered."""
enum CommentOrderField {
  CREATE_TIME
  UPDATE_TIME
}

"""
CommentWhereInput is used for filtering Comment objects.
Input was generated by ent.
"""
input CommentWhereInput {
  and: [CommentWhereInput!]

  """author_id field predicates"""
  authorID: ID
  authorIDContains: ID
  authorIDContainsFold: ID
  authorIDEqualFold: ID
  authorIDGT: ID
  authorIDGTE: ID
  authorIDHasPrefix: ID
  authorIDHasSuffix: ID
  authorIDIn: [ID!]
  authorIDIsNil: Boolean
  authorIDLT: ID
  authorIDLTE: ID
  authorIDNEQ: ID
  authorIDNotIn: [ID!]
  authorIDNotNil: Boolean

  """blog_id field predicates"""
  blogID: ID
  blogIDContains: ID
  blogIDContainsFold: ID
  blogIDEqualFold: ID
  blogIDGT: ID
  blogIDGTE: ID
  blogIDHasPrefix: ID
  blogIDHasSuffix: ID
  blogIDIn: [ID!]
  blogIDIsNil: Boolean
  blogIDLT: ID
  blogIDLTE: ID
  blogIDNEQ: ID
  blogIDNotIn: [ID!]
  blogIDNotNil: Boolean

  """body field predicates"""
  body: String
  bodyContains: String
  bodyContainsFold: String
  bodyEqualFold: String
  bodyGT: String
  bodyGTE: String
  bodyHasPrefix: String
  bodyHasSuffix: String
  bodyIn: [String!]
  bodyLT: String
  bodyLTE: String
  bodyNEQ: String
  bodyNotIn: [String!]

  """create_time field predicates"""
  createTime: Time
  createTimeGT: Time
  createTimeGTE: Time
  createTimeIn: [Time!]
  createTimeLT: Time
  createTimeLTE: Time
  createTimeNEQ: Time
  createTimeNotIn: [Time!]

  """author edge predicates"""
  hasAuthor: Boolean
  hasAuthorWith: [ProfileWhereInput!]

  """blog edge predicates"""
  hasBlog: Boolean
  hasBlogWith: [BlogWhereInput!]

  """post edge predicates"""
  hasPost: Boolean
  hasPostWith: [PostWhereInput!]

  """reactions edge predicates"""
  hasReactions: Boolean
  hasReactionsWith: [ReactionWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: CommentWhereInput
  or: [CommentWhereInput!]

  """post_id field predicates"""
  postID: ID
  postIDContains: ID
  postIDContainsFold: ID
  postIDEqualFold: ID
  postIDGT: ID
  postIDGTE: ID
  postIDHasPrefix: ID
  postIDHasSuffix: ID
  postIDIn: [ID!]
  postIDIsNil: Boolean
  postIDLT: ID
  postIDLTE: ID
  postIDNEQ: ID
  postIDNotIn: [ID!]
  postIDNotNil: Boolean

  """update_time field predicates"""
  updateTime: Time
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeIn: [Time!]
  updateTimeIsNil: Boolean
  updateTimeLT: Time
  updateTimeLTE: Time
  updateTimeNEQ: Time
  updateTimeNotIn: [Time!]
  updateTimeNotNil: Boolean
}

"""
CreateBlogInput is used for create Blog object.
Input was generated by ent.
"""
input CreateBlogInput {
  authorIDs: [ID!]
  categoryIDs: [ID!]
  commentIDs: [ID!]
  createTime: Time
  description: String
  featured: Boolean
  ownerID: ID
  pageIDs: [ID!]
  postIDs: [ID!]
  slug: String!
  subscriberIDs: [ID!]
  tagIDs: [ID!]
  tagline: String
  title: String!
  updateTime: Time
}

"""
CreateCategoryInput is used for create Category object.
Input was generated by ent.
"""
input CreateCategoryInput {
  blogID: ID
  name: String!
  postIDs: [ID!]
  slug: String!
}

"""
CreateCommentInput is used for create Comment object.
Input was generated by ent.
"""
input CreateCommentInput {
  authorID: ID
  blogID: ID
  body: String!
  createTime: Time
  postID: ID
  reactionIDs: [ID!]
  updateTime: Time
}

"""
CreatePageInput is used for create Page object.
Input was generated by ent.
"""
input CreatePageInput {
  blogID: ID
  body: String!
  createTime: Time
  slug: String!
  title: String!
  updateTime: Time
}

"""
CreatePostInput is used for create Post object.
Input was generated by ent.
"""
input CreatePostInput {
  authorID: ID
  blogID: ID
  body: String!
  categoryIDs: [ID!]
  commentIDs: [ID!]
  createTime: Time
  reactionIDs: [ID!]
  slug: String!
  status: PostStatus
  tagIDs: [ID!]
  title: String!
  updateTime: Time
}

"""
CreateProfileInput is used for create Profile object.
Input was generated by ent.
"""
input CreateProfileInput {
  authoringIDs: [ID!]
  avatar: String
  commentIDs: [ID!]
  name: String!
  owningIDs: [ID!]
  postIDs: [ID!]
  reactionIDs: [ID!]
  sub: String!
  subscribedIDs: [ID!]
}

"""
CreateReactionInput is used for create Reaction object.
Input was generated by ent.
"""
input CreateReactionInput {
  commentID: ID
  expression: ReactionExpression!
  postID: ID
  profileID: ID
}

"""
CreateTagInput is used for create Tag object.
Input was generated by ent.
"""
input CreateTagInput {
  blogID: ID
  name: String!
  postIDs: [ID!]
  slug: String!
}

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor

type Mutation {
  createBlog(input: CreateBlogInput!): Blog
  createCategory(input: CreateCategoryInput!): Category
  createComment(input: CreateCommentInput!): Comment
  createPage(input: CreatePageInput!): Page
  createPost(input: CreatePostInput!): Post
  createProfile(input: CreateProfileInput!): Profile
  createReaction(input: CreateReactionInput!): Reaction
  createTag(input: CreateTagInput!): Tag
  deleteBlog(id: ID!): Boolean
  deleteCategory(id: ID!): Boolean
  deleteComment(id: ID!): Boolean
  deletePage(id: ID!): Boolean
  deletePost(id: ID!): Boolean
  deleteProfile(id: ID!): Boolean
  deleteReaction(id: ID!): Boolean
  deleteTag(id: ID!): Boolean
  updateBlog(id: ID!, input: UpdateBlogInput!): Blog
  updateCategory(id: ID!, input: UpdateCategoryInput!): Category
  updateComment(id: ID!, input: UpdateCommentInput!): Comment
  updatePage(id: ID!, input: UpdatePageInput!): Page
  updatePost(id: ID!, input: UpdatePostInput!): Post
  updateProfile(id: ID!, input: UpdateProfileInput!): Profile
  updateReaction(id: ID!, input: UpdateReactionInput!): Reaction
  updateTag(id: ID!, input: UpdateTagInput!): Tag
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC

  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}

type Page implements Node {
  blog: Blog
  blogID: ID
  body: String!
  createTime: Time!
  id: ID!
  slug: String!
  title: String!
  updateTime: Time
}

"""A connection to a list of items."""
type PageConnection {
  """A list of edges."""
  edges: [PageEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type PageEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: Page
}

"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""Ordering options for Page connections"""
input PageOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Pages."""
  field: PageOrderField!
}

"""Properties by which Page connections can be ordered."""
enum PageOrderField {
  CREATE_TIME
  TITLE
  UPDATE_TIME
}

"""
PageWhereInput is used for filtering Page objects.
Input was generated by ent.
"""
input PageWhereInput {
  and: [PageWhereInput!]

  """blog_id field predicates"""
  blogID: ID
  blogIDContains: ID
  blogIDContainsFold: ID
  blogIDEqualFold: ID
  blogIDGT: ID
  blogIDGTE: ID
  blogIDHasPrefix: ID
  blogIDHasSuffix: ID
  blogIDIn: [ID!]
  blogIDIsNil: Boolean
  blogIDLT: ID
  blogIDLTE: ID
  blogIDNEQ: ID
  blogIDNotIn: [ID!]
  blogIDNotNil: Boolean

  """body field predicates"""
  body: String
  bodyContains: String
  bodyContainsFold: String
  bodyEqualFold: String
  bodyGT: String
  bodyGTE: String
  bodyHasPrefix: String
  bodyHasSuffix: String
  bodyIn: [String!]
  bodyLT: String
  bodyLTE: String
  bodyNEQ: String
  bodyNotIn: [String!]

  """create_time field predicates"""
  createTime: Time
  createTimeGT: Time
  createTimeGTE: Time
  createTimeIn: [Time!]
  createTimeLT: Time
  createTimeLTE: Time
  createTimeNEQ: Time
  createTimeNotIn: [Time!]

  """blog edge predicates"""
  hasBlog: Boolean
  hasBlogWith: [BlogWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: PageWhereInput
  or: [PageWhereInput!]

  """slug field predicates"""
  slug: String
  slugContains: String
  slugContainsFold: String
  slugEqualFold: String
  slugGT: String
  slugGTE: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIn: [String!]
  slugLT: String
  slugLTE: String
  slugNEQ: String
  slugNotIn: [String!]

  """title field predicates"""
  title: String
  titleContains: String
  titleContainsFold: String
  titleEqualFold: String
  titleGT: String
  titleGTE: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIn: [String!]
  titleLT: String
  titleLTE: String
  titleNEQ: String
  titleNotIn: [String!]

  """update_time field predicates"""
  updateTime: Time
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeIn: [Time!]
  updateTimeIsNil: Boolean
  updateTimeLT: Time
  updateTimeLTE: Time
  updateTimeNEQ: Time
  updateTimeNotIn: [Time!]
  updateTimeNotNil: Boolean
}

type Post implements Node {
  author: Profile
  authorID: ID
  blog: Blog
  blogID: ID
  body: String!
  categories: [Category!]
  comments: [Comment!]
  createTime: Time!
  id: ID!
  reactions: [Reaction!]
  slug: String!
  status: PostStatus!
  tags: [Tag!]
  title: String!
  updateTime: Time
}

"""A connection to a list of items."""
type PostConnection {
  """A list of edges."""
  edges: [PostEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type PostEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: Post
}

"""Ordering options for Post connections"""
input PostOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Posts."""
  field: PostOrderField!
}

"""Properties by which Post connections can be ordered."""
enum PostOrderField {
  CREATE_TIME
  STATUS
  TITLE
  UPDATE_TIME
}

"""PostStatus is enum for the field status"""
enum PostStatus {
  draft
  private
  published
}

"""
PostWhereInput is used for filtering Post objects.
Input was generated by ent.
"""
input PostWhereInput {
  and: [PostWhereInput!]

  """author_id field predicates"""
  authorID: ID
  authorIDContains: ID
  authorIDContainsFold: ID
  authorIDEqualFold: ID
  authorIDGT: ID
  authorIDGTE: ID
  authorIDHasPrefix: ID
  authorIDHasSuffix: ID
  authorIDIn: [ID!]
  authorIDIsNil: Boolean
  authorIDLT: ID
  authorIDLTE: ID
  authorIDNEQ: ID
  authorIDNotIn: [ID!]
  authorIDNotNil: Boolean

  """blog_id field predicates"""
  blogID: ID
  blogIDContains: ID
  blogIDContainsFold: ID
  blogIDEqualFold: ID
  blogIDGT: ID
  blogIDGTE: ID
  blogIDHasPrefix: ID
  blogIDHasSuffix: ID
  blogIDIn: [ID!]
  blogIDIsNil: Boolean
  blogIDLT: ID
  blogIDLTE: ID
  blogIDNEQ: ID
  blogIDNotIn: [ID!]
  blogIDNotNil: Boolean

  """body field predicates"""
  body: String
  bodyContains: String
  bodyContainsFold: String
  bodyEqualFold: String
  bodyGT: String
  bodyGTE: String
  bodyHasPrefix: String
  bodyHasSuffix: String
  bodyIn: [String!]
  bodyLT: String
  bodyLTE: String
  bodyNEQ: String
  bodyNotIn: [String!]

  """create_time field predicates"""
  createTime: Time
  createTimeGT: Time
  createTimeGTE: Time
  createTimeIn: [Time!]
  createTimeLT: Time
  createTimeLTE: Time
  createTimeNEQ: Time
  createTimeNotIn: [Time!]

  """author edge predicates"""
  hasAuthor: Boolean
  hasAuthorWith: [ProfileWhereInput!]

  """blog edge predicates"""
  hasBlog: Boolean
  hasBlogWith: [BlogWhereInput!]

  """categories edge predicates"""
  hasCategories: Boolean
  hasCategoriesWith: [CategoryWhereInput!]

  """comments edge predicates"""
  hasComments: Boolean
  hasCommentsWith: [CommentWhereInput!]

  """reactions edge predicates"""
  hasReactions: Boolean
  hasReactionsWith: [ReactionWhereInput!]

  """tags edge predicates"""
  hasTags: Boolean
  hasTagsWith: [TagWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: PostWhereInput
  or: [PostWhereInput!]

  """slug field predicates"""
  slug: String
  slugContains: String
  slugContainsFold: String
  slugEqualFold: String
  slugGT: String
  slugGTE: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIn: [String!]
  slugLT: String
  slugLTE: String
  slugNEQ: String
  slugNotIn: [String!]

  """status field predicates"""
  status: PostStatus
  statusIn: [PostStatus!]
  statusNEQ: PostStatus
  statusNotIn: [PostStatus!]

  """title field predicates"""
  title: String
  titleContains: String
  titleContainsFold: String
  titleEqualFold: String
  titleGT: String
  titleGTE: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIn: [String!]
  titleLT: String
  titleLTE: String
  titleNEQ: String
  titleNotIn: [String!]

  """update_time field predicates"""
  updateTime: Time
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeIn: [Time!]
  updateTimeIsNil: Boolean
  updateTimeLT: Time
  updateTimeLTE: Time
  updateTimeNEQ: Time
  updateTimeNotIn: [Time!]
  updateTimeNotNil: Boolean
}

type Profile implements Node {
  authoring: [Blog!]
  avatar: String
  comments: [Comment!]
  id: ID!
  name: String!
  owning: [Blog!]
  posts: [Post!]
  reactions: [Reaction!]
  sub: String!
  subscribed: [Blog!]
}

"""A connection to a list of items."""
type ProfileConnection {
  """A list of edges."""
  edges: [ProfileEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ProfileEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: Profile
}

"""Ordering options for Profile connections"""
input ProfileOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Profiles."""
  field: ProfileOrderField!
}

"""Properties by which Profile connections can be ordered."""
enum ProfileOrderField {
  NAME
}

"""
ProfileWhereInput is used for filtering Profile objects.
Input was generated by ent.
"""
input ProfileWhereInput {
  and: [ProfileWhereInput!]

  """avatar field predicates"""
  avatar: String
  avatarContains: String
  avatarContainsFold: String
  avatarEqualFold: String
  avatarGT: String
  avatarGTE: String
  avatarHasPrefix: String
  avatarHasSuffix: String
  avatarIn: [String!]
  avatarIsNil: Boolean
  avatarLT: String
  avatarLTE: String
  avatarNEQ: String
  avatarNotIn: [String!]
  avatarNotNil: Boolean

  """authoring edge predicates"""
  hasAuthoring: Boolean
  hasAuthoringWith: [BlogWhereInput!]

  """comments edge predicates"""
  hasComments: Boolean
  hasCommentsWith: [CommentWhereInput!]

  """owning edge predicates"""
  hasOwning: Boolean
  hasOwningWith: [BlogWhereInput!]

  """posts edge predicates"""
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]

  """reactions edge predicates"""
  hasReactions: Boolean
  hasReactionsWith: [ReactionWhereInput!]

  """subscribed edge predicates"""
  hasSubscribed: Boolean
  hasSubscribedWith: [BlogWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]

  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: ProfileWhereInput
  or: [ProfileWhereInput!]

  """sub field predicates"""
  sub: String
  subContains: String
  subContainsFold: String
  subEqualFold: String
  subGT: String
  subGTE: String
  subHasPrefix: String
  subHasSuffix: String
  subIn: [String!]
  subLT: String
  subLTE: String
  subNEQ: String
  subNotIn: [String!]
}

type Query {
  blogs(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Blogs returned from the connection."""
    orderBy: BlogOrder

    """Filtering options for Blogs returned from the connection."""
    where: BlogWhereInput
  ): BlogConnection!
  categories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Categories returned from the connection."""
    orderBy: CategoryOrder

    """Filtering options for Categories returned from the connection."""
    where: CategoryWhereInput
  ): CategoryConnection!
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Comments returned from the connection."""
    orderBy: CommentOrder

    """Filtering options for Comments returned from the connection."""
    where: CommentWhereInput
  ): CommentConnection!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  pages(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Pages returned from the connection."""
    orderBy: PageOrder

    """Filtering options for Pages returned from the connection."""
    where: PageWhereInput
  ): PageConnection!
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Posts returned from the connection."""
    orderBy: PostOrder

    """Filtering options for Posts returned from the connection."""
    where: PostWhereInput
  ): PostConnection!
  profiles(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Profiles returned from the connection."""
    orderBy: ProfileOrder

    """Filtering options for Profiles returned from the connection."""
    where: ProfileWhereInput
  ): ProfileConnection!
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Reactions returned from the connection."""
    orderBy: ReactionOrder

    """Filtering options for Reactions returned from the connection."""
    where: ReactionWhereInput
  ): ReactionConnection!
  tags(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Tags returned from the connection."""
    orderBy: TagOrder

    """Filtering options for Tags returned from the connection."""
    where: TagWhereInput
  ): TagConnection!
}

type Reaction implements Node {
  comment: Comment
  commentID: ID
  expression: ReactionExpression!
  id: ID!
  post: Post
  postID: ID
  profile: Profile
  profileID: ID
}

"""A connection to a list of items."""
type ReactionConnection {
  """A list of edges."""
  edges: [ReactionEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ReactionEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: Reaction
}

"""ReactionExpression is enum for the field expression"""
enum ReactionExpression {
  angry
  confused
  cry
  down
  laugh
  smile
  surprised
  up
}

"""Ordering options for Reaction connections"""
input ReactionOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Reactions."""
  field: ReactionOrderField!
}

"""Properties by which Reaction connections can be ordered."""
enum ReactionOrderField {
  EXPRESSION
}

"""
ReactionWhereInput is used for filtering Reaction objects.
Input was generated by ent.
"""
input ReactionWhereInput {
  and: [ReactionWhereInput!]

  """comment_id field predicates"""
  commentID: ID
  commentIDContains: ID
  commentIDContainsFold: ID
  commentIDEqualFold: ID
  commentIDGT: ID
  commentIDGTE: ID
  commentIDHasPrefix: ID
  commentIDHasSuffix: ID
  commentIDIn: [ID!]
  commentIDIsNil: Boolean
  commentIDLT: ID
  commentIDLTE: ID
  commentIDNEQ: ID
  commentIDNotIn: [ID!]
  commentIDNotNil: Boolean

  """expression field predicates"""
  expression: ReactionExpression
  expressionIn: [ReactionExpression!]
  expressionNEQ: ReactionExpression
  expressionNotIn: [ReactionExpression!]

  """comment edge predicates"""
  hasComment: Boolean
  hasCommentWith: [CommentWhereInput!]

  """post edge predicates"""
  hasPost: Boolean
  hasPostWith: [PostWhereInput!]

  """profile edge predicates"""
  hasProfile: Boolean
  hasProfileWith: [ProfileWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: ReactionWhereInput
  or: [ReactionWhereInput!]

  """post_id field predicates"""
  postID: ID
  postIDContains: ID
  postIDContainsFold: ID
  postIDEqualFold: ID
  postIDGT: ID
  postIDGTE: ID
  postIDHasPrefix: ID
  postIDHasSuffix: ID
  postIDIn: [ID!]
  postIDIsNil: Boolean
  postIDLT: ID
  postIDLTE: ID
  postIDNEQ: ID
  postIDNotIn: [ID!]
  postIDNotNil: Boolean

  """profile_id field predicates"""
  profileID: ID
  profileIDContains: ID
  profileIDContainsFold: ID
  profileIDEqualFold: ID
  profileIDGT: ID
  profileIDGTE: ID
  profileIDHasPrefix: ID
  profileIDHasSuffix: ID
  profileIDIn: [ID!]
  profileIDIsNil: Boolean
  profileIDLT: ID
  profileIDLTE: ID
  profileIDNEQ: ID
  profileIDNotIn: [ID!]
  profileIDNotNil: Boolean
}

type Tag implements Node {
  blog: Blog
  blogID: ID
  id: ID!
  name: String!
  posts: [Post!]
  slug: String!
}

"""A connection to a list of items."""
type TagConnection {
  """A list of edges."""
  edges: [TagEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type TagEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: Tag
}

"""Ordering options for Tag connections"""
input TagOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Tags."""
  field: TagOrderField!
}

"""Properties by which Tag connections can be ordered."""
enum TagOrderField {
  NAME
}

"""
TagWhereInput is used for filtering Tag objects.
Input was generated by ent.
"""
input TagWhereInput {
  and: [TagWhereInput!]

  """blog_id field predicates"""
  blogID: ID
  blogIDContains: ID
  blogIDContainsFold: ID
  blogIDEqualFold: ID
  blogIDGT: ID
  blogIDGTE: ID
  blogIDHasPrefix: ID
  blogIDHasSuffix: ID
  blogIDIn: [ID!]
  blogIDIsNil: Boolean
  blogIDLT: ID
  blogIDLTE: ID
  blogIDNEQ: ID
  blogIDNotIn: [ID!]
  blogIDNotNil: Boolean

  """blog edge predicates"""
  hasBlog: Boolean
  hasBlogWith: [BlogWhereInput!]

  """posts edge predicates"""
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]

  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: TagWhereInput
  or: [TagWhereInput!]

  """slug field predicates"""
  slug: String
  slugContains: String
  slugContainsFold: String
  slugEqualFold: String
  slugGT: String
  slugGTE: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIn: [String!]
  slugLT: String
  slugLTE: String
  slugNEQ: String
  slugNotIn: [String!]
}

"""The builtin Time type"""
scalar Time

"""
UpdateBlogInput is used for update Blog object.
Input was generated by ent.
"""
input UpdateBlogInput {
  addAuthorIDs: [ID!]
  addCategoryIDs: [ID!]
  addCommentIDs: [ID!]
  addPageIDs: [ID!]
  addPostIDs: [ID!]
  addSubscriberIDs: [ID!]
  addTagIDs: [ID!]
  clearAuthors: Boolean
  clearCategories: Boolean
  clearComments: Boolean
  clearDescription: Boolean
  clearFeatured: Boolean
  clearOwner: Boolean
  clearPages: Boolean
  clearPosts: Boolean
  clearSubscribers: Boolean
  clearTagline: Boolean
  clearTags: Boolean
  clearUpdateTime: Boolean
  description: String
  featured: Boolean
  ownerID: ID
  removeAuthorIDs: [ID!]
  removeCategoryIDs: [ID!]
  removeCommentIDs: [ID!]
  removePageIDs: [ID!]
  removePostIDs: [ID!]
  removeSubscriberIDs: [ID!]
  removeTagIDs: [ID!]
  slug: String
  tagline: String
  title: String
  updateTime: Time
}

"""
UpdateCategoryInput is used for update Category object.
Input was generated by ent.
"""
input UpdateCategoryInput {
  addPostIDs: [ID!]
  blogID: ID
  clearBlog: Boolean
  clearPosts: Boolean
  name: String
  removePostIDs: [ID!]
  slug: String
}

"""
UpdateCommentInput is used for update Comment object.
Input was generated by ent.
"""
input UpdateCommentInput {
  addReactionIDs: [ID!]
  authorID: ID
  blogID: ID
  body: String
  clearAuthor: Boolean
  clearBlog: Boolean
  clearPost: Boolean
  clearReactions: Boolean
  clearUpdateTime: Boolean
  postID: ID
  removeReactionIDs: [ID!]
  updateTime: Time
}

"""
UpdatePageInput is used for update Page object.
Input was generated by ent.
"""
input UpdatePageInput {
  blogID: ID
  body: String
  clearBlog: Boolean
  clearUpdateTime: Boolean
  slug: String
  title: String
  updateTime: Time
}

"""
UpdatePostInput is used for update Post object.
Input was generated by ent.
"""
input UpdatePostInput {
  addCategoryIDs: [ID!]
  addCommentIDs: [ID!]
  addReactionIDs: [ID!]
  addTagIDs: [ID!]
  blogID: ID
  body: String
  clearBlog: Boolean
  clearCategories: Boolean
  clearComments: Boolean
  clearReactions: Boolean
  clearTags: Boolean
  clearUpdateTime: Boolean
  removeCategoryIDs: [ID!]
  removeCommentIDs: [ID!]
  removeReactionIDs: [ID!]
  removeTagIDs: [ID!]
  slug: String
  status: PostStatus
  title: String
  updateTime: Time
}

"""
UpdateProfileInput is used for update Profile object.
Input was generated by ent.
"""
input UpdateProfileInput {
  addAuthoringIDs: [ID!]
  addCommentIDs: [ID!]
  addOwningIDs: [ID!]
  addPostIDs: [ID!]
  addReactionIDs: [ID!]
  addSubscribedIDs: [ID!]
  avatar: String
  clearAuthoring: Boolean
  clearAvatar: Boolean
  clearComments: Boolean
  clearOwning: Boolean
  clearPosts: Boolean
  clearReactions: Boolean
  clearSubscribed: Boolean
  name: String
  removeAuthoringIDs: [ID!]
  removeCommentIDs: [ID!]
  removeOwningIDs: [ID!]
  removePostIDs: [ID!]
  removeReactionIDs: [ID!]
  removeSubscribedIDs: [ID!]
  sub: String
}

"""
UpdateReactionInput is used for update Reaction object.
Input was generated by ent.
"""
input UpdateReactionInput {
  clearComment: Boolean
  clearPost: Boolean
  clearProfile: Boolean
  commentID: ID
  expression: ReactionExpression
  postID: ID
  profileID: ID
}

"""
UpdateTagInput is used for update Tag object.
Input was generated by ent.
"""
input UpdateTagInput {
  addPostIDs: [ID!]
  blogID: ID
  clearBlog: Boolean
  clearPosts: Boolean
  name: String
  removePostIDs: [ID!]
  slug: String
}
